import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.7.0
 * Query Engine version: eaade828a21d8ee3f4940f0af7da3ae0922db4df
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): CategoryDelegate;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): RoomDelegate;

  /**
   * `prisma.roomClick`: Exposes CRUD operations for the **RoomClick** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomClicks
    * const roomClicks = await prisma.roomClick.findMany()
    * ```
    */
  get roomClick(): RoomClickDelegate;

  /**
   * `prisma.roomCredentials`: Exposes CRUD operations for the **RoomCredentials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomCredentials
    * const roomCredentials = await prisma.roomCredentials.findMany()
    * ```
    */
  get roomCredentials(): RoomCredentialsDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const CategoryDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  thumbnailUrl: 'thumbnailUrl'
};

export declare type CategoryDistinctFieldEnum = (typeof CategoryDistinctFieldEnum)[keyof typeof CategoryDistinctFieldEnum]


export declare const RoomDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  roomUrl: 'roomUrl',
  thumbnailUrl: 'thumbnailUrl',
  categoryId: 'categoryId',
  deletedAt: 'deletedAt'
};

export declare type RoomDistinctFieldEnum = (typeof RoomDistinctFieldEnum)[keyof typeof RoomDistinctFieldEnum]


export declare const RoomClickDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roomId: 'roomId'
};

export declare type RoomClickDistinctFieldEnum = (typeof RoomClickDistinctFieldEnum)[keyof typeof RoomClickDistinctFieldEnum]


export declare const RoomCredentialsDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roomId: 'roomId',
  password: 'password'
};

export declare type RoomCredentialsDistinctFieldEnum = (typeof RoomCredentialsDistinctFieldEnum)[keyof typeof RoomCredentialsDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Category
 */

export type Category = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  thumbnailUrl: string | null
}


export type AggregateCategory = {
  count: number
}



export type AggregateCategoryArgs = {
  where?: CategoryWhereInput
  orderBy?: Enumerable<CategoryOrderByInput>
  cursor?: CategoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CategoryDistinctFieldEnum>
  count?: true
}

export type GetCategoryAggregateType<T extends AggregateCategoryArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type CategorySelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  thumbnailUrl?: boolean
  rooms?: boolean | FindManyRoomArgs
}

export type CategoryInclude = {
  rooms?: boolean | FindManyRoomArgs
}

export type CategoryGetPayload<
  S extends boolean | null | undefined | CategoryArgs,
  U = keyof S
> = S extends true
  ? Category
  : S extends undefined
  ? never
  : S extends CategoryArgs | FindManyCategoryArgs
  ? 'include' extends U
    ? Category  & {
      [P in TrueKeys<S['include']>]:
      P extends 'rooms'
      ? Array<RoomGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Category ? Category[P]
: 
      P extends 'rooms'
      ? Array<RoomGetPayload<S['select'][P]>> : never
    }
  : Category
: Category


export interface CategoryDelegate {
  /**
   * Find zero or one Category.
   * @param {FindOneCategoryArgs} args - Arguments to find a Category
   * @example
   * // Get one Category
   * const category = await prisma.category.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCategoryArgs>(
    args: Subset<T, FindOneCategoryArgs>
  ): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>
  /**
   * Find zero or more Categories.
   * @param {FindManyCategoryArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Categories
   * const categories = await prisma.category.findMany()
   * 
   * // Get first 10 Categories
   * const categories = await prisma.category.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyCategoryArgs>(
    args?: Subset<T, FindManyCategoryArgs>
  ): CheckSelect<T, Promise<Array<Category>>, Promise<Array<CategoryGetPayload<T>>>>
  /**
   * Create a Category.
   * @param {CategoryCreateArgs} args - Arguments to create a Category.
   * @example
   * // Create one Category
   * const Category = await prisma.category.create({
   *   data: {
   *     // ... data to create a Category
   *   }
   * })
   * 
  **/
  create<T extends CategoryCreateArgs>(
    args: Subset<T, CategoryCreateArgs>
  ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>
  /**
   * Delete a Category.
   * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
   * @example
   * // Delete one Category
   * const Category = await prisma.category.delete({
   *   where: {
   *     // ... filter to delete one Category
   *   }
   * })
   * 
  **/
  delete<T extends CategoryDeleteArgs>(
    args: Subset<T, CategoryDeleteArgs>
  ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>
  /**
   * Update one Category.
   * @param {CategoryUpdateArgs} args - Arguments to update one Category.
   * @example
   * // Update one Category
   * const category = await prisma.category.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CategoryUpdateArgs>(
    args: Subset<T, CategoryUpdateArgs>
  ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>
  /**
   * Delete zero or more Categories.
   * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
   * @example
   * // Delete a few Categories
   * const { count } = await prisma.category.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CategoryDeleteManyArgs>(
    args: Subset<T, CategoryDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Categories.
   * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Categories
   * const category = await prisma.category.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CategoryUpdateManyArgs>(
    args: Subset<T, CategoryUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Category.
   * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
   * @example
   * // Update or create a Category
   * const category = await prisma.category.upsert({
   *   create: {
   *     // ... data to create a Category
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Category we want to update
   *   }
   * })
  **/
  upsert<T extends CategoryUpsertArgs>(
    args: Subset<T, CategoryUpsertArgs>
  ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyCategoryArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCategoryArgs>(args: Subset<T, AggregateCategoryArgs>): Promise<GetCategoryAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Category.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__CategoryClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  rooms<T extends FindManyRoomArgs = {}>(args?: Subset<T, FindManyRoomArgs>): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Category findOne
 */
export type FindOneCategoryArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * Filter, which Category to fetch.
  **/
  where: CategoryWhereUniqueInput
}


/**
 * Category findMany
 */
export type FindManyCategoryArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * Filter, which Categories to fetch.
  **/
  where?: CategoryWhereInput
  /**
   * Determine the order of the Categories to fetch.
  **/
  orderBy?: Enumerable<CategoryOrderByInput>
  /**
   * Sets the position for listing Categories.
  **/
  cursor?: CategoryWhereUniqueInput
  /**
   * The number of Categories to fetch. If negative number, it will take Categories before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Categories.
  **/
  skip?: number
  distinct?: Enumerable<CategoryDistinctFieldEnum>
}


/**
 * Category create
 */
export type CategoryCreateArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * The data needed to create a Category.
  **/
  data: CategoryCreateInput
}


/**
 * Category update
 */
export type CategoryUpdateArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * The data needed to update a Category.
  **/
  data: CategoryUpdateInput
  /**
   * Choose, which Category to update.
  **/
  where: CategoryWhereUniqueInput
}


/**
 * Category updateMany
 */
export type CategoryUpdateManyArgs = {
  data: CategoryUpdateManyMutationInput
  where?: CategoryWhereInput
}


/**
 * Category upsert
 */
export type CategoryUpsertArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * The filter to search for the Category to update in case it exists.
  **/
  where: CategoryWhereUniqueInput
  /**
   * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
  **/
  create: CategoryCreateInput
  /**
   * In case the Category was found with the provided `where` argument, update it with this data.
  **/
  update: CategoryUpdateInput
}


/**
 * Category delete
 */
export type CategoryDeleteArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
  /**
   * Filter which Category to delete.
  **/
  where: CategoryWhereUniqueInput
}


/**
 * Category deleteMany
 */
export type CategoryDeleteManyArgs = {
  where?: CategoryWhereInput
}


/**
 * Category without action
 */
export type CategoryArgs = {
  /**
   * Select specific fields to fetch from the Category
  **/
  select?: CategorySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CategoryInclude | null
}



/**
 * Model Room
 */

export type Room = {
  id: string
  createdAt: Date
  updatedAt: Date
  title: string | null
  roomUrl: string
  thumbnailUrl: string | null
  categoryId: string
  deletedAt: Date | null
}


export type AggregateRoom = {
  count: number
}



export type AggregateRoomArgs = {
  where?: RoomWhereInput
  orderBy?: Enumerable<RoomOrderByInput>
  cursor?: RoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
  count?: true
}

export type GetRoomAggregateType<T extends AggregateRoomArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type RoomSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  roomUrl?: boolean
  thumbnailUrl?: boolean
  roomCredentials?: boolean | RoomCredentialsArgs
  category?: boolean | CategoryArgs
  categoryId?: boolean
  clicks?: boolean | FindManyRoomClickArgs
  deletedAt?: boolean
}

export type RoomInclude = {
  roomCredentials?: boolean | RoomCredentialsArgs
  category?: boolean | CategoryArgs
  clicks?: boolean | FindManyRoomClickArgs
}

export type RoomGetPayload<
  S extends boolean | null | undefined | RoomArgs,
  U = keyof S
> = S extends true
  ? Room
  : S extends undefined
  ? never
  : S extends RoomArgs | FindManyRoomArgs
  ? 'include' extends U
    ? Room  & {
      [P in TrueKeys<S['include']>]:
      P extends 'roomCredentials'
      ? RoomCredentialsGetPayload<S['include'][P]> :
      P extends 'category'
      ? CategoryGetPayload<S['include'][P]> :
      P extends 'clicks'
      ? Array<RoomClickGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Room ? Room[P]
: 
      P extends 'roomCredentials'
      ? RoomCredentialsGetPayload<S['select'][P]> :
      P extends 'category'
      ? CategoryGetPayload<S['select'][P]> :
      P extends 'clicks'
      ? Array<RoomClickGetPayload<S['select'][P]>> : never
    }
  : Room
: Room


export interface RoomDelegate {
  /**
   * Find zero or one Room.
   * @param {FindOneRoomArgs} args - Arguments to find a Room
   * @example
   * // Get one Room
   * const room = await prisma.room.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRoomArgs>(
    args: Subset<T, FindOneRoomArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>
  /**
   * Find zero or more Rooms.
   * @param {FindManyRoomArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rooms
   * const rooms = await prisma.room.findMany()
   * 
   * // Get first 10 Rooms
   * const rooms = await prisma.room.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRoomArgs>(
    args?: Subset<T, FindManyRoomArgs>
  ): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>
  /**
   * Create a Room.
   * @param {RoomCreateArgs} args - Arguments to create a Room.
   * @example
   * // Create one Room
   * const Room = await prisma.room.create({
   *   data: {
   *     // ... data to create a Room
   *   }
   * })
   * 
  **/
  create<T extends RoomCreateArgs>(
    args: Subset<T, RoomCreateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete a Room.
   * @param {RoomDeleteArgs} args - Arguments to delete one Room.
   * @example
   * // Delete one Room
   * const Room = await prisma.room.delete({
   *   where: {
   *     // ... filter to delete one Room
   *   }
   * })
   * 
  **/
  delete<T extends RoomDeleteArgs>(
    args: Subset<T, RoomDeleteArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Update one Room.
   * @param {RoomUpdateArgs} args - Arguments to update one Room.
   * @example
   * // Update one Room
   * const room = await prisma.room.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RoomUpdateArgs>(
    args: Subset<T, RoomUpdateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete zero or more Rooms.
   * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
   * @example
   * // Delete a few Rooms
   * const { count } = await prisma.room.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RoomDeleteManyArgs>(
    args: Subset<T, RoomDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Rooms.
   * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rooms
   * const room = await prisma.room.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RoomUpdateManyArgs>(
    args: Subset<T, RoomUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Room.
   * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
   * @example
   * // Update or create a Room
   * const room = await prisma.room.upsert({
   *   create: {
   *     // ... data to create a Room
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Room we want to update
   *   }
   * })
  **/
  upsert<T extends RoomUpsertArgs>(
    args: Subset<T, RoomUpsertArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRoomArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRoomArgs>(args: Subset<T, AggregateRoomArgs>): Promise<GetRoomAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Room.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RoomClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  roomCredentials<T extends RoomCredentialsArgs = {}>(args?: Subset<T, RoomCredentialsArgs>): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials | null>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T> | null>>;

  category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>;

  clicks<T extends FindManyRoomClickArgs = {}>(args?: Subset<T, FindManyRoomClickArgs>): CheckSelect<T, Promise<Array<RoomClick>>, Promise<Array<RoomClickGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Room findOne
 */
export type FindOneRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter, which Room to fetch.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room findMany
 */
export type FindManyRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter, which Rooms to fetch.
  **/
  where?: RoomWhereInput
  /**
   * Determine the order of the Rooms to fetch.
  **/
  orderBy?: Enumerable<RoomOrderByInput>
  /**
   * Sets the position for listing Rooms.
  **/
  cursor?: RoomWhereUniqueInput
  /**
   * The number of Rooms to fetch. If negative number, it will take Rooms before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Rooms.
  **/
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
}


/**
 * Room create
 */
export type RoomCreateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The data needed to create a Room.
  **/
  data: RoomCreateInput
}


/**
 * Room update
 */
export type RoomUpdateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The data needed to update a Room.
  **/
  data: RoomUpdateInput
  /**
   * Choose, which Room to update.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room updateMany
 */
export type RoomUpdateManyArgs = {
  data: RoomUpdateManyMutationInput
  where?: RoomWhereInput
}


/**
 * Room upsert
 */
export type RoomUpsertArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * The filter to search for the Room to update in case it exists.
  **/
  where: RoomWhereUniqueInput
  /**
   * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
  **/
  create: RoomCreateInput
  /**
   * In case the Room was found with the provided `where` argument, update it with this data.
  **/
  update: RoomUpdateInput
}


/**
 * Room delete
 */
export type RoomDeleteArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
  /**
   * Filter which Room to delete.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room deleteMany
 */
export type RoomDeleteManyArgs = {
  where?: RoomWhereInput
}


/**
 * Room without action
 */
export type RoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: RoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomInclude | null
}



/**
 * Model RoomClick
 */

export type RoomClick = {
  id: string
  createdAt: Date
  updatedAt: Date
  roomId: string
}


export type AggregateRoomClick = {
  count: number
}



export type AggregateRoomClickArgs = {
  where?: RoomClickWhereInput
  orderBy?: Enumerable<RoomClickOrderByInput>
  cursor?: RoomClickWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomClickDistinctFieldEnum>
  count?: true
}

export type GetRoomClickAggregateType<T extends AggregateRoomClickArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type RoomClickSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  room?: boolean | RoomArgs
  roomId?: boolean
}

export type RoomClickInclude = {
  room?: boolean | RoomArgs
}

export type RoomClickGetPayload<
  S extends boolean | null | undefined | RoomClickArgs,
  U = keyof S
> = S extends true
  ? RoomClick
  : S extends undefined
  ? never
  : S extends RoomClickArgs | FindManyRoomClickArgs
  ? 'include' extends U
    ? RoomClick  & {
      [P in TrueKeys<S['include']>]:
      P extends 'room'
      ? RoomGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof RoomClick ? RoomClick[P]
: 
      P extends 'room'
      ? RoomGetPayload<S['select'][P]> : never
    }
  : RoomClick
: RoomClick


export interface RoomClickDelegate {
  /**
   * Find zero or one RoomClick.
   * @param {FindOneRoomClickArgs} args - Arguments to find a RoomClick
   * @example
   * // Get one RoomClick
   * const roomClick = await prisma.roomClick.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRoomClickArgs>(
    args: Subset<T, FindOneRoomClickArgs>
  ): CheckSelect<T, Prisma__RoomClickClient<RoomClick | null>, Prisma__RoomClickClient<RoomClickGetPayload<T> | null>>
  /**
   * Find zero or more RoomClicks.
   * @param {FindManyRoomClickArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RoomClicks
   * const roomClicks = await prisma.roomClick.findMany()
   * 
   * // Get first 10 RoomClicks
   * const roomClicks = await prisma.roomClick.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomClickWithIdOnly = await prisma.roomClick.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRoomClickArgs>(
    args?: Subset<T, FindManyRoomClickArgs>
  ): CheckSelect<T, Promise<Array<RoomClick>>, Promise<Array<RoomClickGetPayload<T>>>>
  /**
   * Create a RoomClick.
   * @param {RoomClickCreateArgs} args - Arguments to create a RoomClick.
   * @example
   * // Create one RoomClick
   * const RoomClick = await prisma.roomClick.create({
   *   data: {
   *     // ... data to create a RoomClick
   *   }
   * })
   * 
  **/
  create<T extends RoomClickCreateArgs>(
    args: Subset<T, RoomClickCreateArgs>
  ): CheckSelect<T, Prisma__RoomClickClient<RoomClick>, Prisma__RoomClickClient<RoomClickGetPayload<T>>>
  /**
   * Delete a RoomClick.
   * @param {RoomClickDeleteArgs} args - Arguments to delete one RoomClick.
   * @example
   * // Delete one RoomClick
   * const RoomClick = await prisma.roomClick.delete({
   *   where: {
   *     // ... filter to delete one RoomClick
   *   }
   * })
   * 
  **/
  delete<T extends RoomClickDeleteArgs>(
    args: Subset<T, RoomClickDeleteArgs>
  ): CheckSelect<T, Prisma__RoomClickClient<RoomClick>, Prisma__RoomClickClient<RoomClickGetPayload<T>>>
  /**
   * Update one RoomClick.
   * @param {RoomClickUpdateArgs} args - Arguments to update one RoomClick.
   * @example
   * // Update one RoomClick
   * const roomClick = await prisma.roomClick.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RoomClickUpdateArgs>(
    args: Subset<T, RoomClickUpdateArgs>
  ): CheckSelect<T, Prisma__RoomClickClient<RoomClick>, Prisma__RoomClickClient<RoomClickGetPayload<T>>>
  /**
   * Delete zero or more RoomClicks.
   * @param {RoomClickDeleteManyArgs} args - Arguments to filter RoomClicks to delete.
   * @example
   * // Delete a few RoomClicks
   * const { count } = await prisma.roomClick.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RoomClickDeleteManyArgs>(
    args: Subset<T, RoomClickDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more RoomClicks.
   * @param {RoomClickUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RoomClicks
   * const roomClick = await prisma.roomClick.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RoomClickUpdateManyArgs>(
    args: Subset<T, RoomClickUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one RoomClick.
   * @param {RoomClickUpsertArgs} args - Arguments to update or create a RoomClick.
   * @example
   * // Update or create a RoomClick
   * const roomClick = await prisma.roomClick.upsert({
   *   create: {
   *     // ... data to create a RoomClick
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RoomClick we want to update
   *   }
   * })
  **/
  upsert<T extends RoomClickUpsertArgs>(
    args: Subset<T, RoomClickUpsertArgs>
  ): CheckSelect<T, Prisma__RoomClickClient<RoomClick>, Prisma__RoomClickClient<RoomClickGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRoomClickArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRoomClickArgs>(args: Subset<T, AggregateRoomClickArgs>): Promise<GetRoomClickAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for RoomClick.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RoomClickClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * RoomClick findOne
 */
export type FindOneRoomClickArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * Filter, which RoomClick to fetch.
  **/
  where: RoomClickWhereUniqueInput
}


/**
 * RoomClick findMany
 */
export type FindManyRoomClickArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * Filter, which RoomClicks to fetch.
  **/
  where?: RoomClickWhereInput
  /**
   * Determine the order of the RoomClicks to fetch.
  **/
  orderBy?: Enumerable<RoomClickOrderByInput>
  /**
   * Sets the position for listing RoomClicks.
  **/
  cursor?: RoomClickWhereUniqueInput
  /**
   * The number of RoomClicks to fetch. If negative number, it will take RoomClicks before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` RoomClicks.
  **/
  skip?: number
  distinct?: Enumerable<RoomClickDistinctFieldEnum>
}


/**
 * RoomClick create
 */
export type RoomClickCreateArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * The data needed to create a RoomClick.
  **/
  data: RoomClickCreateInput
}


/**
 * RoomClick update
 */
export type RoomClickUpdateArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * The data needed to update a RoomClick.
  **/
  data: RoomClickUpdateInput
  /**
   * Choose, which RoomClick to update.
  **/
  where: RoomClickWhereUniqueInput
}


/**
 * RoomClick updateMany
 */
export type RoomClickUpdateManyArgs = {
  data: RoomClickUpdateManyMutationInput
  where?: RoomClickWhereInput
}


/**
 * RoomClick upsert
 */
export type RoomClickUpsertArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * The filter to search for the RoomClick to update in case it exists.
  **/
  where: RoomClickWhereUniqueInput
  /**
   * In case the RoomClick found by the `where` argument doesn't exist, create a new RoomClick with this data.
  **/
  create: RoomClickCreateInput
  /**
   * In case the RoomClick was found with the provided `where` argument, update it with this data.
  **/
  update: RoomClickUpdateInput
}


/**
 * RoomClick delete
 */
export type RoomClickDeleteArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
  /**
   * Filter which RoomClick to delete.
  **/
  where: RoomClickWhereUniqueInput
}


/**
 * RoomClick deleteMany
 */
export type RoomClickDeleteManyArgs = {
  where?: RoomClickWhereInput
}


/**
 * RoomClick without action
 */
export type RoomClickArgs = {
  /**
   * Select specific fields to fetch from the RoomClick
  **/
  select?: RoomClickSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomClickInclude | null
}



/**
 * Model RoomCredentials
 */

export type RoomCredentials = {
  id: string
  createdAt: Date
  updatedAt: Date
  roomId: string
  password: string
}


export type AggregateRoomCredentials = {
  count: number
}



export type AggregateRoomCredentialsArgs = {
  where?: RoomCredentialsWhereInput
  orderBy?: Enumerable<RoomCredentialsOrderByInput>
  cursor?: RoomCredentialsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomCredentialsDistinctFieldEnum>
  count?: true
}

export type GetRoomCredentialsAggregateType<T extends AggregateRoomCredentialsArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type RoomCredentialsSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  room?: boolean | RoomArgs
  roomId?: boolean
  password?: boolean
}

export type RoomCredentialsInclude = {
  room?: boolean | RoomArgs
}

export type RoomCredentialsGetPayload<
  S extends boolean | null | undefined | RoomCredentialsArgs,
  U = keyof S
> = S extends true
  ? RoomCredentials
  : S extends undefined
  ? never
  : S extends RoomCredentialsArgs | FindManyRoomCredentialsArgs
  ? 'include' extends U
    ? RoomCredentials  & {
      [P in TrueKeys<S['include']>]:
      P extends 'room'
      ? RoomGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof RoomCredentials ? RoomCredentials[P]
: 
      P extends 'room'
      ? RoomGetPayload<S['select'][P]> : never
    }
  : RoomCredentials
: RoomCredentials


export interface RoomCredentialsDelegate {
  /**
   * Find zero or one RoomCredentials.
   * @param {FindOneRoomCredentialsArgs} args - Arguments to find a RoomCredentials
   * @example
   * // Get one RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRoomCredentialsArgs>(
    args: Subset<T, FindOneRoomCredentialsArgs>
  ): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials | null>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T> | null>>
  /**
   * Find zero or more RoomCredentials.
   * @param {FindManyRoomCredentialsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.findMany()
   * 
   * // Get first 10 RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomCredentialsWithIdOnly = await prisma.roomCredentials.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRoomCredentialsArgs>(
    args?: Subset<T, FindManyRoomCredentialsArgs>
  ): CheckSelect<T, Promise<Array<RoomCredentials>>, Promise<Array<RoomCredentialsGetPayload<T>>>>
  /**
   * Create a RoomCredentials.
   * @param {RoomCredentialsCreateArgs} args - Arguments to create a RoomCredentials.
   * @example
   * // Create one RoomCredentials
   * const RoomCredentials = await prisma.roomCredentials.create({
   *   data: {
   *     // ... data to create a RoomCredentials
   *   }
   * })
   * 
  **/
  create<T extends RoomCredentialsCreateArgs>(
    args: Subset<T, RoomCredentialsCreateArgs>
  ): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T>>>
  /**
   * Delete a RoomCredentials.
   * @param {RoomCredentialsDeleteArgs} args - Arguments to delete one RoomCredentials.
   * @example
   * // Delete one RoomCredentials
   * const RoomCredentials = await prisma.roomCredentials.delete({
   *   where: {
   *     // ... filter to delete one RoomCredentials
   *   }
   * })
   * 
  **/
  delete<T extends RoomCredentialsDeleteArgs>(
    args: Subset<T, RoomCredentialsDeleteArgs>
  ): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T>>>
  /**
   * Update one RoomCredentials.
   * @param {RoomCredentialsUpdateArgs} args - Arguments to update one RoomCredentials.
   * @example
   * // Update one RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RoomCredentialsUpdateArgs>(
    args: Subset<T, RoomCredentialsUpdateArgs>
  ): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T>>>
  /**
   * Delete zero or more RoomCredentials.
   * @param {RoomCredentialsDeleteManyArgs} args - Arguments to filter RoomCredentials to delete.
   * @example
   * // Delete a few RoomCredentials
   * const { count } = await prisma.roomCredentials.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RoomCredentialsDeleteManyArgs>(
    args: Subset<T, RoomCredentialsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more RoomCredentials.
   * @param {RoomCredentialsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RoomCredentialsUpdateManyArgs>(
    args: Subset<T, RoomCredentialsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one RoomCredentials.
   * @param {RoomCredentialsUpsertArgs} args - Arguments to update or create a RoomCredentials.
   * @example
   * // Update or create a RoomCredentials
   * const roomCredentials = await prisma.roomCredentials.upsert({
   *   create: {
   *     // ... data to create a RoomCredentials
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RoomCredentials we want to update
   *   }
   * })
  **/
  upsert<T extends RoomCredentialsUpsertArgs>(
    args: Subset<T, RoomCredentialsUpsertArgs>
  ): CheckSelect<T, Prisma__RoomCredentialsClient<RoomCredentials>, Prisma__RoomCredentialsClient<RoomCredentialsGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRoomCredentialsArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRoomCredentialsArgs>(args: Subset<T, AggregateRoomCredentialsArgs>): Promise<GetRoomCredentialsAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for RoomCredentials.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RoomCredentialsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * RoomCredentials findOne
 */
export type FindOneRoomCredentialsArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * Filter, which RoomCredentials to fetch.
  **/
  where: RoomCredentialsWhereUniqueInput
}


/**
 * RoomCredentials findMany
 */
export type FindManyRoomCredentialsArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * Filter, which RoomCredentials to fetch.
  **/
  where?: RoomCredentialsWhereInput
  /**
   * Determine the order of the RoomCredentials to fetch.
  **/
  orderBy?: Enumerable<RoomCredentialsOrderByInput>
  /**
   * Sets the position for listing RoomCredentials.
  **/
  cursor?: RoomCredentialsWhereUniqueInput
  /**
   * The number of RoomCredentials to fetch. If negative number, it will take RoomCredentials before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` RoomCredentials.
  **/
  skip?: number
  distinct?: Enumerable<RoomCredentialsDistinctFieldEnum>
}


/**
 * RoomCredentials create
 */
export type RoomCredentialsCreateArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * The data needed to create a RoomCredentials.
  **/
  data: RoomCredentialsCreateInput
}


/**
 * RoomCredentials update
 */
export type RoomCredentialsUpdateArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * The data needed to update a RoomCredentials.
  **/
  data: RoomCredentialsUpdateInput
  /**
   * Choose, which RoomCredentials to update.
  **/
  where: RoomCredentialsWhereUniqueInput
}


/**
 * RoomCredentials updateMany
 */
export type RoomCredentialsUpdateManyArgs = {
  data: RoomCredentialsUpdateManyMutationInput
  where?: RoomCredentialsWhereInput
}


/**
 * RoomCredentials upsert
 */
export type RoomCredentialsUpsertArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * The filter to search for the RoomCredentials to update in case it exists.
  **/
  where: RoomCredentialsWhereUniqueInput
  /**
   * In case the RoomCredentials found by the `where` argument doesn't exist, create a new RoomCredentials with this data.
  **/
  create: RoomCredentialsCreateInput
  /**
   * In case the RoomCredentials was found with the provided `where` argument, update it with this data.
  **/
  update: RoomCredentialsUpdateInput
}


/**
 * RoomCredentials delete
 */
export type RoomCredentialsDeleteArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
  /**
   * Filter which RoomCredentials to delete.
  **/
  where: RoomCredentialsWhereUniqueInput
}


/**
 * RoomCredentials deleteMany
 */
export type RoomCredentialsDeleteManyArgs = {
  where?: RoomCredentialsWhereInput
}


/**
 * RoomCredentials without action
 */
export type RoomCredentialsArgs = {
  /**
   * Select specific fields to fetch from the RoomCredentials
  **/
  select?: RoomCredentialsSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RoomCredentialsInclude | null
}



/**
 * Deep Input Types
 */


export type CategoryWhereInput = {
  AND?: Enumerable<CategoryWhereInput>
  OR?: Array<CategoryWhereInput>
  NOT?: Enumerable<CategoryWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  name?: string | StringFilter
  thumbnailUrl?: string | StringNullableFilter | null
  rooms?: RoomListRelationFilter
}

export type CategoryOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  name?: SortOrder
  thumbnailUrl?: SortOrder
}

export type CategoryWhereUniqueInput = {
  id?: string
  name?: string
}

export type RoomWhereInput = {
  AND?: Enumerable<RoomWhereInput>
  OR?: Array<RoomWhereInput>
  NOT?: Enumerable<RoomWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  title?: string | StringNullableFilter | null
  roomUrl?: string | StringFilter
  thumbnailUrl?: string | StringNullableFilter | null
  roomCredentials?: RoomCredentialsWhereInput | null
  category?: CategoryWhereInput | null
  categoryId?: string | StringFilter
  clicks?: RoomClickListRelationFilter
  deletedAt?: Date | string | DateTimeNullableFilter | null
}

export type RoomOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  title?: SortOrder
  roomUrl?: SortOrder
  thumbnailUrl?: SortOrder
  categoryId?: SortOrder
  deletedAt?: SortOrder
}

export type RoomWhereUniqueInput = {
  id?: string
}

export type RoomClickWhereInput = {
  AND?: Enumerable<RoomClickWhereInput>
  OR?: Array<RoomClickWhereInput>
  NOT?: Enumerable<RoomClickWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  room?: RoomWhereInput | null
  roomId?: string | StringFilter
}

export type RoomClickOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  roomId?: SortOrder
}

export type RoomClickWhereUniqueInput = {
  id?: string
}

export type RoomCredentialsWhereInput = {
  AND?: Enumerable<RoomCredentialsWhereInput>
  OR?: Array<RoomCredentialsWhereInput>
  NOT?: Enumerable<RoomCredentialsWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  room?: RoomWhereInput | null
  roomId?: string | StringFilter
  password?: string | StringFilter
}

export type RoomCredentialsOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  roomId?: SortOrder
  password?: SortOrder
}

export type RoomCredentialsWhereUniqueInput = {
  id?: string
}

export type CategoryCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  name: string
  thumbnailUrl?: string | null
  rooms?: RoomCreateManyWithoutCategoryInput
}

export type CategoryUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  rooms?: RoomUpdateManyWithoutCategoryInput
}

export type CategoryUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
}

export type RoomCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  title?: string | null
  roomUrl: string
  thumbnailUrl?: string | null
  deletedAt?: Date | string | null
  roomCredentials?: RoomCredentialsCreateOneWithoutRoomInput
  category: CategoryCreateOneWithoutRoomsInput
  clicks?: RoomClickCreateManyWithoutRoomInput
}

export type RoomUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  roomCredentials?: RoomCredentialsUpdateOneRequiredWithoutRoomInput
  category?: CategoryUpdateOneRequiredWithoutRoomsInput
  clicks?: RoomClickUpdateManyWithoutRoomInput
}

export type RoomUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type RoomClickCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  room: RoomCreateOneWithoutClicksInput
}

export type RoomClickUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  room?: RoomUpdateOneRequiredWithoutClicksInput
}

export type RoomClickUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type RoomCredentialsCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password?: string
  room: RoomCreateOneWithoutRoomCredentialsInput
}

export type RoomCredentialsUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  room?: RoomUpdateOneRequiredWithoutRoomCredentialsInput
}

export type RoomCredentialsUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type RoomListRelationFilter = {
  every?: RoomWhereInput
  some?: RoomWhereInput
  none?: RoomWhereInput
}

export type RoomCredentialsRelationFilter = {
  is?: RoomCredentialsWhereInput | null
  isNot?: RoomCredentialsWhereInput | null
}

export type CategoryRelationFilter = {
  is?: CategoryWhereInput | null
  isNot?: CategoryWhereInput | null
}

export type RoomClickListRelationFilter = {
  every?: RoomClickWhereInput
  some?: RoomClickWhereInput
  none?: RoomClickWhereInput
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type RoomRelationFilter = {
  is?: RoomWhereInput | null
  isNot?: RoomWhereInput | null
}

export type RoomCreateManyWithoutCategoryInput = {
  create?: Enumerable<RoomCreateWithoutCategoryInput>
  connect?: Enumerable<RoomWhereUniqueInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type RoomUpdateManyWithoutCategoryInput = {
  create?: Enumerable<RoomCreateWithoutCategoryInput>
  connect?: Enumerable<RoomWhereUniqueInput>
  set?: Enumerable<RoomWhereUniqueInput>
  disconnect?: Enumerable<RoomWhereUniqueInput>
  delete?: Enumerable<RoomWhereUniqueInput>
  update?: Enumerable<RoomUpdateWithWhereUniqueWithoutCategoryInput>
  updateMany?: Enumerable<RoomUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<RoomScalarWhereInput>
  upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutCategoryInput>
}

export type RoomCredentialsCreateOneWithoutRoomInput = {
  create?: RoomCredentialsCreateWithoutRoomInput
  connect?: RoomCredentialsWhereUniqueInput
}

export type CategoryCreateOneWithoutRoomsInput = {
  create?: CategoryCreateWithoutRoomsInput
  connect?: CategoryWhereUniqueInput
}

export type RoomClickCreateManyWithoutRoomInput = {
  create?: Enumerable<RoomClickCreateWithoutRoomInput>
  connect?: Enumerable<RoomClickWhereUniqueInput>
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type RoomCredentialsUpdateOneRequiredWithoutRoomInput = {
  create?: RoomCredentialsCreateWithoutRoomInput
  connect?: RoomCredentialsWhereUniqueInput
  update?: RoomCredentialsUpdateWithoutRoomDataInput
  upsert?: RoomCredentialsUpsertWithoutRoomInput
}

export type CategoryUpdateOneRequiredWithoutRoomsInput = {
  create?: CategoryCreateWithoutRoomsInput
  connect?: CategoryWhereUniqueInput
  update?: CategoryUpdateWithoutRoomsDataInput
  upsert?: CategoryUpsertWithoutRoomsInput
}

export type RoomClickUpdateManyWithoutRoomInput = {
  create?: Enumerable<RoomClickCreateWithoutRoomInput>
  connect?: Enumerable<RoomClickWhereUniqueInput>
  set?: Enumerable<RoomClickWhereUniqueInput>
  disconnect?: Enumerable<RoomClickWhereUniqueInput>
  delete?: Enumerable<RoomClickWhereUniqueInput>
  update?: Enumerable<RoomClickUpdateWithWhereUniqueWithoutRoomInput>
  updateMany?: Enumerable<RoomClickUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<RoomClickScalarWhereInput>
  upsert?: Enumerable<RoomClickUpsertWithWhereUniqueWithoutRoomInput>
}

export type RoomCreateOneWithoutClicksInput = {
  create?: RoomCreateWithoutClicksInput
  connect?: RoomWhereUniqueInput
}

export type RoomUpdateOneRequiredWithoutClicksInput = {
  create?: RoomCreateWithoutClicksInput
  connect?: RoomWhereUniqueInput
  update?: RoomUpdateWithoutClicksDataInput
  upsert?: RoomUpsertWithoutClicksInput
}

export type RoomCreateOneWithoutRoomCredentialsInput = {
  create?: RoomCreateWithoutRoomCredentialsInput
  connect?: RoomWhereUniqueInput
}

export type RoomUpdateOneRequiredWithoutRoomCredentialsInput = {
  create?: RoomCreateWithoutRoomCredentialsInput
  connect?: RoomWhereUniqueInput
  update?: RoomUpdateWithoutRoomCredentialsDataInput
  upsert?: RoomUpsertWithoutRoomCredentialsInput
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: NestedDateTimeFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: NestedDateTimeNullableFilter | null
}

export type RoomCreateWithoutCategoryInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  title?: string | null
  roomUrl: string
  thumbnailUrl?: string | null
  deletedAt?: Date | string | null
  roomCredentials?: RoomCredentialsCreateOneWithoutRoomInput
  clicks?: RoomClickCreateManyWithoutRoomInput
}

export type RoomUpdateWithWhereUniqueWithoutCategoryInput = {
  where: RoomWhereUniqueInput
  data: RoomUpdateWithoutCategoryDataInput
}

export type RoomUpdateManyWithWhereNestedInput = {
  where: RoomScalarWhereInput
  data: RoomUpdateManyDataInput
}

export type RoomScalarWhereInput = {
  AND?: Enumerable<RoomScalarWhereInput>
  OR?: Array<RoomScalarWhereInput>
  NOT?: Enumerable<RoomScalarWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  title?: string | StringNullableFilter | null
  roomUrl?: string | StringFilter
  thumbnailUrl?: string | StringNullableFilter | null
  categoryId?: string | StringFilter
  deletedAt?: Date | string | DateTimeNullableFilter | null
}

export type RoomUpsertWithWhereUniqueWithoutCategoryInput = {
  where: RoomWhereUniqueInput
  update: RoomUpdateWithoutCategoryDataInput
  create: RoomCreateWithoutCategoryInput
}

export type RoomCredentialsCreateWithoutRoomInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password?: string
}

export type CategoryCreateWithoutRoomsInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  name: string
  thumbnailUrl?: string | null
}

export type RoomClickCreateWithoutRoomInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RoomCredentialsUpdateWithoutRoomDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type RoomCredentialsUpsertWithoutRoomInput = {
  update: RoomCredentialsUpdateWithoutRoomDataInput
  create: RoomCredentialsCreateWithoutRoomInput
}

export type CategoryUpdateWithoutRoomsDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
}

export type CategoryUpsertWithoutRoomsInput = {
  update: CategoryUpdateWithoutRoomsDataInput
  create: CategoryCreateWithoutRoomsInput
}

export type RoomClickUpdateWithWhereUniqueWithoutRoomInput = {
  where: RoomClickWhereUniqueInput
  data: RoomClickUpdateWithoutRoomDataInput
}

export type RoomClickUpdateManyWithWhereNestedInput = {
  where: RoomClickScalarWhereInput
  data: RoomClickUpdateManyDataInput
}

export type RoomClickScalarWhereInput = {
  AND?: Enumerable<RoomClickScalarWhereInput>
  OR?: Array<RoomClickScalarWhereInput>
  NOT?: Enumerable<RoomClickScalarWhereInput>
  id?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  roomId?: string | StringFilter
}

export type RoomClickUpsertWithWhereUniqueWithoutRoomInput = {
  where: RoomClickWhereUniqueInput
  update: RoomClickUpdateWithoutRoomDataInput
  create: RoomClickCreateWithoutRoomInput
}

export type RoomCreateWithoutClicksInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  title?: string | null
  roomUrl: string
  thumbnailUrl?: string | null
  deletedAt?: Date | string | null
  roomCredentials?: RoomCredentialsCreateOneWithoutRoomInput
  category: CategoryCreateOneWithoutRoomsInput
}

export type RoomUpdateWithoutClicksDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  roomCredentials?: RoomCredentialsUpdateOneRequiredWithoutRoomInput
  category?: CategoryUpdateOneRequiredWithoutRoomsInput
}

export type RoomUpsertWithoutClicksInput = {
  update: RoomUpdateWithoutClicksDataInput
  create: RoomCreateWithoutClicksInput
}

export type RoomCreateWithoutRoomCredentialsInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  title?: string | null
  roomUrl: string
  thumbnailUrl?: string | null
  deletedAt?: Date | string | null
  category: CategoryCreateOneWithoutRoomsInput
  clicks?: RoomClickCreateManyWithoutRoomInput
}

export type RoomUpdateWithoutRoomCredentialsDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  category?: CategoryUpdateOneRequiredWithoutRoomsInput
  clicks?: RoomClickUpdateManyWithoutRoomInput
}

export type RoomUpsertWithoutRoomCredentialsInput = {
  update: RoomUpdateWithoutRoomCredentialsDataInput
  create: RoomCreateWithoutRoomCredentialsInput
}

export type RoomUpdateWithoutCategoryDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  roomCredentials?: RoomCredentialsUpdateOneRequiredWithoutRoomInput
  clicks?: RoomClickUpdateManyWithoutRoomInput
}

export type RoomUpdateManyDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  roomUrl?: string | StringFieldUpdateOperationsInput
  thumbnailUrl?: string | NullableStringFieldUpdateOperationsInput | null
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type RoomClickUpdateWithoutRoomDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type RoomClickUpdateManyDataInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
