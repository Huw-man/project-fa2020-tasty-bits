datasource db {
  url      = env("POSTGRES_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id 
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  name              String?
  biography         String?
  class             String?
  major             String?
  profileVisibility ProfileVisibility @default(FULL)
  linkedin          String?
  facebook          String?
  twitter           String?
  instagram         String?
  snapchat          String?
  tiktok            String?
  openToHelp        Boolean? @default(true)
  studentType       StudentType       @default(GENERAL)
  chatrooms         Chatroom[]
  questions         Question[]
  questionVotes     QuestionVote[]
  questionClicks    QuestionClick[]
  answerVotes       AnswerVote[]
  answers           Answer[]
  messages          Message[]

  @@index([name])
  @@index([biography])
}

enum ProfileVisibility {
  NONE
  FULL
}

model Category {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  questions Question[]
}

model Question {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  title       String
  description String?
  votes       QuestionVote[]
  clicks      QuestionClick[]
  answers     Answer[]
  deletedAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  categories Category[]

  @@index([title])
  @@index([description])
}

model QuestionVote {

  @@id([ questionId, userId ])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upDown Boolean

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model QuestionClick {

  @@id([ questionId, userId ])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  votes   AnswerVote[]

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  deletedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([content])

}

model AnswerVote {

  @@id([ answerId, userId ])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upDown Boolean

  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Chatroom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  users User[]
}

model Message {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  chatroom   Chatroom? @relation(fields: [chatroomId], references: [id])
  chatroomId String?
}

enum StudentType {
  GENERAL
  INTERNATIONAL
  FIRSTGEN
  TRANSFER
}

