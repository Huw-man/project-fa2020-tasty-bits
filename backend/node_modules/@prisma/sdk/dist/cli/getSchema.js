"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaSync = exports.getSchemaDirSync = exports.getSchemaPathFromPackageJsonSync = exports.getSchemaPathSyncInternal = exports.getSchemaPathSync = exports.getSchema = exports.getSchemaDir = exports.getRelativeSchemaPath = exports.getSchemaPathFromPackageJson = exports.getSchemaPathInternal = exports.getSchemaPath = void 0;
const execa_1 = __importDefault(require("execa"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const read_pkg_up_1 = __importDefault(require("read-pkg-up"));
const util_1 = require("util");
const exists = util_1.promisify(fs_1.default.exists);
const readFile = util_1.promisify(fs_1.default.readFile);
/**
 * Async
 */
function getSchemaPath(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        return getSchemaPathInternal(schemaPathFromArgs, {
            cwd: process.cwd(),
        });
    });
}
exports.getSchemaPath = getSchemaPath;
function getSchemaPathInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd(),
}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (schemaPathFromArgs) {
            // 1. try the user custom path
            const customSchemaPath = yield getAbsoluteSchemaPath(path_1.default.resolve(schemaPathFromArgs));
            if (!customSchemaPath) {
                throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
            }
            return customSchemaPath;
        }
        // 2. Try the package.json `prisma.schema` custom path
        // 3. Try the conventional ./schema.prisma or ./prisma/schema.prisma paths
        // 4. Try resolving yarn workspaces and looking for a schema.prisma file there
        const schemaPath = (_b = (_a = (yield getSchemaPathFromPackageJson(opts.cwd))) !== null && _a !== void 0 ? _a : (yield getRelativeSchemaPath(opts.cwd))) !== null && _b !== void 0 ? _b : (yield resolveYarnSchema(opts.cwd));
        if (schemaPath) {
            return schemaPath;
        }
        return null;
    });
}
exports.getSchemaPathInternal = getSchemaPathInternal;
function getSchemaPathFromPackageJson(cwd) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const pkgJson = yield read_pkg_up_1.default({ cwd });
        const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
        if (!schemaPathFromPkgJson || !pkgJson) {
            return null;
        }
        if (typeof schemaPathFromPkgJson !== 'string') {
            throw new Error(`Provided schema path configuration \`${schemaPathFromPkgJson}\` at ./${path_1.default.relative(cwd, pkgJson.path)} must be of type string`);
        }
        const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson)
            ? schemaPathFromPkgJson
            : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
        if ((yield exists(absoluteSchemaPath)) === false) {
            throw new Error(`Provided schema path at ./${path_1.default.relative(cwd, absoluteSchemaPath)} from ./${path_1.default.relative(cwd, pkgJson.path)} doesn't exist.`);
        }
        return absoluteSchemaPath;
    });
}
exports.getSchemaPathFromPackageJson = getSchemaPathFromPackageJson;
function resolveYarnSchema(cwd) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes('yarn')) {
            try {
                const { stdout: version } = yield execa_1.default.command('yarn --version', {
                    cwd,
                });
                if (version.startsWith('2')) {
                    return null;
                }
                const { stdout } = yield execa_1.default.command('yarn workspaces info --json', {
                    cwd,
                });
                const json = getJson(stdout);
                const workspaces = Object.values(json);
                const workspaceRootDir = yield findWorkspaceRoot(cwd);
                if (!workspaceRootDir) {
                    return null;
                }
                // Iterate over the workspaces
                for (const workspace of workspaces) {
                    const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
                    const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
                    if (workspaceSchemaPath) {
                        return workspaceSchemaPath;
                    }
                }
                const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
                if (workspaceSchemaPathFromRoot) {
                    return workspaceSchemaPathFromRoot;
                }
            }
            catch (e) {
                return null;
            }
        }
        return null;
    });
}
function resolveYarnSchemaSync(cwd) {
    var _a, _b, _c;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes('yarn')) {
        try {
            const { stdout: version } = execa_1.default.commandSync('yarn --version', {
                cwd,
            });
            if (version.startsWith('2')) {
                return null;
            }
            const { stdout } = execa_1.default.commandSync('yarn workspaces info --json', {
                cwd,
            });
            const json = getJson(stdout);
            const workspaces = Object.values(json);
            const workspaceRootDir = findWorkspaceRootSync(cwd);
            if (!workspaceRootDir) {
                return null;
            }
            // Iterate over the workspaces
            for (const workspace of workspaces) {
                const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
                const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
                if (workspaceSchemaPath) {
                    return workspaceSchemaPath;
                }
            }
            const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
            if (workspaceSchemaPathFromRoot) {
                return workspaceSchemaPathFromRoot;
            }
        }
        catch (e) {
            return null;
        }
    }
    return null;
}
function getAbsoluteSchemaPath(schemaPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        return null;
    });
}
function getRelativeSchemaPath(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        let schemaPath = path_1.default.join(cwd, 'schema.prisma');
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        return null;
    });
}
exports.getRelativeSchemaPath = getRelativeSchemaPath;
/**
 * Small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDir(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (schemaPathFromArgs) {
            return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
        }
        const schemaPath = yield getSchemaPath(schemaPathFromArgs);
        if (schemaPath) {
            return path_1.default.dirname(schemaPath);
        }
        return null;
    });
}
exports.getSchemaDir = getSchemaDir;
function getSchema(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        const schemaPath = yield getSchemaPath(schemaPathFromArgs);
        if (!schemaPath) {
            throw new Error(`Could not find ${schemaPathFromArgs || 'schema.prisma'}`);
        }
        return readFile(schemaPath, 'utf-8');
    });
}
exports.getSchema = getSchema;
/**
 * Sync
 */
function getSchemaPathSync(schemaPathFromArgs) {
    return getSchemaPathSyncInternal(schemaPathFromArgs, {
        cwd: process.cwd(),
    });
}
exports.getSchemaPathSync = getSchemaPathSync;
function getSchemaPathSyncInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd(),
}) {
    var _a, _b;
    if (schemaPathFromArgs) {
        // 1. Try the user custom path
        const customSchemaPath = getAbsoluteSchemaPathSync(path_1.default.resolve(schemaPathFromArgs));
        if (!customSchemaPath) {
            throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
        }
        return customSchemaPath;
    }
    // 2. Try the package.json `prisma.schema` custom path
    // 3. Try the conventional `./schema.prisma` or `./prisma/schema.prisma` paths
    // 4. Try resolving yarn workspaces and looking for a schema.prisma file there
    const schemaPath = (_b = (_a = getSchemaPathFromPackageJsonSync(opts.cwd)) !== null && _a !== void 0 ? _a : getRelativeSchemaPathSync(opts.cwd)) !== null && _b !== void 0 ? _b : resolveYarnSchemaSync(opts.cwd);
    if (schemaPath) {
        return schemaPath;
    }
    return null;
}
exports.getSchemaPathSyncInternal = getSchemaPathSyncInternal;
function getSchemaPathFromPackageJsonSync(cwd) {
    var _a, _b;
    const pkgJson = read_pkg_up_1.default.sync({ cwd });
    const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
    if (!schemaPathFromPkgJson || !pkgJson) {
        return null;
    }
    if (typeof schemaPathFromPkgJson !== 'string') {
        throw new Error(`Provided schema path configuration \`${schemaPathFromPkgJson}\` at ./${path_1.default.relative(cwd, pkgJson.path)} must be of type string`);
    }
    const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson)
        ? schemaPathFromPkgJson
        : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
    if (fs_1.default.existsSync(absoluteSchemaPath) === false) {
        throw new Error(`Provided schema path at ./${path_1.default.relative(cwd, absoluteSchemaPath)} from ./${path_1.default.relative(cwd, pkgJson.path)} doesn't exist.`);
    }
    return absoluteSchemaPath;
}
exports.getSchemaPathFromPackageJsonSync = getSchemaPathFromPackageJsonSync;
function getAbsoluteSchemaPathSync(schemaPath) {
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    return null;
}
function getRelativeSchemaPathSync(cwd) {
    let schemaPath = path_1.default.join(cwd, 'schema.prisma');
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    return null;
}
/**
 * Sync version of the small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDirSync(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
        return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (schemaPath) {
        return path_1.default.dirname(schemaPath);
    }
    return null;
}
exports.getSchemaDirSync = getSchemaDirSync;
function getSchemaSync(schemaPathFromArgs) {
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (!schemaPath) {
        throw new Error(`Could not find ${schemaPath || 'schema.prisma'}`);
    }
    return fs_1.default.readFileSync(schemaPath, 'utf-8');
}
exports.getSchemaSync = getSchemaSync;
function getJson(stdout) {
    const firstCurly = stdout.indexOf('{');
    const lastCurly = stdout.lastIndexOf('}');
    const sliced = stdout.slice(firstCurly, lastCurly + 1);
    return JSON.parse(sliced);
}
function isPkgJsonWorkspaceRoot(pkgJson) {
    const workspaces = pkgJson.workspaces;
    if (!workspaces) {
        return false;
    }
    return Array.isArray(workspaces) || workspaces.packages !== undefined;
}
function isNearestPkgJsonWorkspaceRoot(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        const pkgJson = yield read_pkg_up_1.default({ cwd });
        if (!pkgJson) {
            return null;
        }
        return {
            isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
            path: pkgJson.path,
        };
    });
}
function isNearestPkgJsonWorkspaceRootSync(cwd) {
    const pkgJson = read_pkg_up_1.default.sync({ cwd });
    if (!pkgJson) {
        return null;
    }
    return {
        isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
        path: pkgJson.path,
    };
}
function findWorkspaceRoot(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        let pkgJson = yield isNearestPkgJsonWorkspaceRoot(cwd);
        if (!pkgJson) {
            return null;
        }
        if (pkgJson.isRoot === true) {
            return path_1.default.dirname(pkgJson.path);
        }
        const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
        pkgJson = yield isNearestPkgJsonWorkspaceRoot(pkgJsonParentDir);
        if (!pkgJson || pkgJson.isRoot === false) {
            return null;
        }
        return path_1.default.dirname(pkgJson.path);
    });
}
function findWorkspaceRootSync(cwd) {
    let pkgJson = isNearestPkgJsonWorkspaceRootSync(cwd);
    if (!pkgJson) {
        return null;
    }
    if (pkgJson.isRoot === true) {
        return path_1.default.dirname(pkgJson.path);
    }
    const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
    pkgJson = isNearestPkgJsonWorkspaceRootSync(pkgJsonParentDir);
    if (!pkgJson || pkgJson.isRoot === false) {
        return null;
    }
    return path_1.default.dirname(pkgJson.path);
}
//# sourceMappingURL=getSchema.js.map